layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_, local_size_y=1, local_size_z=1) in;
 
// Output Descriptor
layout(set=0, binding=1, rgba16f) uniform image2D outImage;
#define _NBL_GLSL_EXT_FFT_OUTPUT_DESCRIPTOR_DEFINED_


#include "extra_parameters.glsl"
layout(push_constant) uniform PushConstants
{
	image_store_parameters_t params;
} pc;
#define _NBL_GLSL_EXT_FFT_PUSH_CONSTANTS_DEFINED_

nbl_glsl_ext_FFT_Parameters_t nbl_glsl_ext_FFT_getParameters()
{
	return pc.params.fft;
}
#define _NBL_GLSL_EXT_FFT_GET_PARAMETERS_DEFINED_


#include <nbl/builtin/glsl/math/complex.glsl>
void nbl_glsl_ext_FFT_setData(in uvec3 coordinate, in uint channel, in nbl_glsl_complex complex_value)
{
	const ivec2 coords = ivec2(coordinate.xy)-pc.params.unpad_offset;

    if (all(lessThanEqual(ivec2(0),coords)) && all(greaterThan(imageSize(outImage),coords)))
    {
        vec4 color_value = imageLoad(outImage, coords);
        color_value[channel] = complex_value.x;
        imageStore(outImage, coords, color_value);
    }
}
#define _NBL_GLSL_EXT_FFT_SET_DATA_DEFINED_


nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(ivec3 coordinate, in uint channel);
#define _NBL_GLSL_EXT_FFT_GET_PADDED_DATA_DEFINED_

#include "nbl/builtin/glsl/ext/FFT/default_compute_fft.comp"

nbl_glsl_complex nbl_glsl_ext_FFT_getPaddedData(ivec3 coordinate, in uint channel) 
{
	if (!nbl_glsl_ext_FFT_wrap_coord(coordinate))
		return nbl_glsl_complex(0.f,0.f);

	// TODO choose coordinate wisely!
	const bool upperHalf = bool(coordinate.y&0x1u);
	if (upperHalf)
		coordinate.y = (0x3<<findMSB(coordinate.y))+(~coordinate.y);
	
	const uint index = nbl_glsl_dot(uvec4(coordinate,channel),nbl_glsl_ext_FFT_Parameters_t_getInputStrides());
	nbl_glsl_complex retval = nbl_glsl_ext_FFT_storage_t_get(inData[index]);
	
	if (upperHalf)
		retval.y = -retval.y;
	
	return retval;
}